package main

import "text/template"

// EnumProtoTemplate generates only enum definitions in proto file
var EnumProtoTemplate = template.Must(template.New("fix.enum.proto").Funcs(templateFuncs).Parse(`// Code generated by generate-pb. DO NOT EDIT.
syntax = "proto3";

package {{extractPackageName .GoPackagePrefix}};

option go_package = "{{.GoPackagePrefix}}";

{{/* Generate enum definitions */}}
{{range getAllEnumDefinitions}}
// {{.Name}} represents the {{.FieldType}} field type enum values
enum {{.ProtoName}} {
{{$enumName := .ProtoName}}{{range $index, $value := .Values}}  {{$value.GetProtoEnumValueName $enumName}} = {{$value.IntegerValue}};{{if $value.Description}} // {{$value.Description}}{{end}}
{{end}}}

{{end}}
`))

var GroupProtoTemplate = template.Must(template.New("fix.group.proto").Funcs(templateFuncs).Parse(`// Code generated by generate-pb. DO NOT EDIT.
syntax = "proto3";

package {{extractPackageName .GoPackagePrefix}};

option go_package = "{{.GoPackagePrefix}}";

// Import enum definitions
import "fix.enum.proto";

{{/* Generate unique group message definitions */}}
{{$seenGroups := dict}}{{range .Messages}}{{range $group := getAllGroups .MessageDef}}{{$groupName := generateGroupMessageName $group}}{{if not (hasKey $seenGroups $groupName)}}{{set $seenGroups $groupName true}}
// {{$groupName}} represents a single entry in the {{$group.FieldType.Name}} repeating group
message {{$groupName}} {
{{$fieldNum := 1}}{{range $field := $group.RequiredFields}}  {{getProtoTypeForField $field}} {{sanitizeProtoFieldName $field.FieldType.Name}} = {{$fieldNum}}; // Required group field
{{$fieldNum = add $fieldNum 1}}{{end}}{{range $field := $group.Fields}}{{$isRequired := false}}{{range $req := $group.RequiredFields}}{{if eq $req.FieldType.Tag $field.FieldType.Tag}}{{$isRequired = true}}{{end}}{{end}}{{if not $isRequired}}  {{getProtoTypeForField $field}} {{sanitizeProtoFieldName $field.FieldType.Name}} = {{$fieldNum}}; // Optional group field
{{$fieldNum = add $fieldNum 1}}{{end}}{{end}}}

{{end}}{{end}}{{end}}
`))

// MessageProtoTemplate generates only message definitions in proto file
var MessageProtoTemplate = template.Must(template.New("fix.message.proto").Funcs(templateFuncs).Parse(`// Code generated by generate-pb. DO NOT EDIT.
syntax = "proto3";

package {{extractPackageName .GoPackagePrefix}};

option go_package = "{{.GoPackagePrefix}}";

// Import enum definitions
import "fix.enum.proto";
import "fix.group.proto";

{{range .Messages}}
// {{.Name}} message definition (from {{.Package}} specification)
message {{.Name}} {
{{$fieldNum := 1}}{{range $field := getRequiredFields .MessageDef}}{{if $field.IsGroup}}  repeated {{generateGroupMessageName $field}} {{sanitizeProtoFieldName $field.FieldType.Name}} = {{$fieldNum}}; // Required group
{{$fieldNum = add $fieldNum 1}}{{else}}  {{getProtoTypeForField $field}} {{sanitizeProtoFieldName $field.FieldType.Name}} = {{$fieldNum}}; // Required field
{{$fieldNum = add $fieldNum 1}}{{end}}{{end}}{{range $field := getOptionalFields .MessageDef}}{{if $field.IsGroup}}  repeated {{generateGroupMessageName $field}} {{sanitizeProtoFieldName $field.FieldType.Name}} = {{$fieldNum}}; // Optional group
{{$fieldNum = add $fieldNum 1}}{{else}}  {{getProtoTypeForField $field}} {{sanitizeProtoFieldName $field.FieldType.Name}} = {{$fieldNum}}; // Optional field
{{$fieldNum = add $fieldNum 1}}{{end}}{{end}}}

{{end}}
`))
